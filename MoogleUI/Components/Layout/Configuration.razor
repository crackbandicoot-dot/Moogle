@*
    File: Configuration.razor
    Component: UI Components
*@

@using Shared
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms

<div class="configuration-form-container">
    <h3>Application Configuration</h3>
    <EditForm Model="@Config" OnValidSubmit="HandleSave">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="resultsPerPage">Results Per Page:</label>
            <InputNumber id="resultsPerPage" class="form-control" @bind-Value="Config.ResultsPerPage" />
        </div>

        <div class="form-group">
            <label for="snippetLength">Snippet Length:</label>
            <InputNumber id="snippetLength" class="form-control" @bind-Value="Config.SnippetLength" />
        </div>

        <div class="form-group">
            <label for="theme">Theme:</label>
            <InputText id="theme" class="form-control" @bind-Value="Config.Theme" />
        </div>

        <div class="form-group">
            <label for="indexPath">Search Index Path:</label>
            <InputText id="indexPath" class="form-control" @bind-Value="Config.SearchIndexPath" />
        </div>

        <div class="form-actions">
            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
        </div>
    </EditForm>
</div>

@code {
    /// <summary>
    /// The configuration object being edited. A parent component should provide a copy
    /// of the main configuration to allow for the cancellation of changes.
    /// </summary>
    [Parameter, EditorRequired]
    public SearchConfiguration Config { get; set; } = new();

    /// <summary>
    /// Event callback invoked when the user clicks the 'Save' button.
    /// It passes the modified configuration object back to the parent.
    /// </summary>
    [Parameter]
    public EventCallback<SearchConfiguration> OnSave { get; set; }

    /// <summary>
    /// Event callback invoked when the user clicks the 'Cancel' button.
    /// </summary>
    [Parameter]
    public EventCallback OnCancel { get; set; }

    /// <summary>
    /// Handles the form submission by invoking the OnSave event callback.
    /// </summary>
    /// <returns>A Task representing the asynchronous operation.</returns>
    private Task HandleSave()
    {
        // 1. Invoke the OnSave event callback, passing the current 'Config' object.
        return OnSave.InvokeAsync(Config);
    }

    /// <summary>
    /// Handles the cancel action by invoking the OnCancel event callback.
    /// </summary>
    /// <returns>A Task representing the asynchronous operation.</returns>
    private Task HandleCancel()
    {
        // 1. Invoke the OnCancel event callback.
        return OnCancel.InvokeAsync();
    }
}