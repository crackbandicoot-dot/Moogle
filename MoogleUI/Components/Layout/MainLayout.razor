@*
    File: MainLayout.razor
    Component: UI Components
*@

@inherits LayoutComponentBase
@using MoogleUI.Components.Pages
@using Shared;
@inject ISearchService SearchService
@inject IConfigurationService ConfigService
@inject IJSRuntime JS

<div >
    <main class="container">
        <button class="position-fixed top-0 end-0 m-3" style="background: transparent; border: none; padding: 0;" type="button" @onclick="ShowConfigurationForm">
            <img src="/config-icon.ico" width="50" height="50" alt="Config">
        </button>
        <SearchPage OnDocumentOpenRequested="HandleDocumentOpenRequested" />
            <TabbedView 
                Tabs="_openTabs" 
                ActiveTab="_activeTab" 
                OnTabSelected="HandleTabSelected" 
                OnTabClosed="HandleTabClosed" />
           
            <hr />
    </main>
</div>


@if (_showConfiguration)
{
    <div class="modal-backdrop">
        <div class="modal-content">
            <Configuration Config="_configForEditing" OnSave="HandleConfigurationSave" OnCancel="HandleConfigurationCancel" />
        </div>
    </div>
}


@code {
    private List<Document> _openTabs = new();
    private Document? _activeTab;
    private bool _showConfiguration = false;
    private SearchConfiguration _configForEditing = new();

    /// <summary>
    /// Handles the request to open a new document tab.
    /// </summary>
    /// <param name="documentId">The ID of the document to open.</param>
    private async Task HandleDocumentOpenRequested(string documentId)
    {
        try
        {
            // Use Process.Start to open the file with the default application.
            // This will open the file in the default browser if it's an HTML, PDF, etc.,
            // or the relevant application for other file types.
            new System.Diagnostics.Process
            {
                StartInfo = new System.Diagnostics.ProcessStartInfo(documentId)
                {
                    UseShellExecute = true
                }
            }.Start();
        }
        catch (Exception ex)
        {
            // Handle exceptions, e.g., file not found, no application associated with the file type.
            Console.WriteLine($"Error opening file: {ex.Message}");
        }

        // Call StateHasChanged() to update the UI if needed.
        StateHasChanged();
        await Task.CompletedTask;
    }
    /// <summary>
    /// Sets the currently active tab when a user clicks on a tab header.
    /// </summary>
    /// <param name="selectedTab">The tab that was selected.</param>
    private void HandleTabSelected(Document selectedTab)
    {
        // 1. Set the _activeTab field to the 'selectedTab'.
        _activeTab = selectedTab;
    }

    /// <summary>
    /// Closes a document tab and updates the active tab if necessary.
    /// </summary>
    /// <param name="tabToClose">The tab to be closed.</param>
    private void HandleTabClosed(Document tabToClose)
    {
        // 1. Remove 'tabToClose' from the _openTabs list.
        _openTabs.Remove(tabToClose);

        // 2. Check if the closed tab was the active tab (_activeTab).
        if (_activeTab == tabToClose)
        {
            // 3. If it was, set the new _activeTab to be the last tab in the list, or null if the list is now empty.
            _activeTab = _openTabs.LastOrDefault();
        }
    }

    /// <summary>
    /// Prepares and displays the configuration form.
    /// </summary>
    private async Task ShowConfigurationForm()
    {
        // 1. Load the current configuration using ConfigService.LoadConfigurationAsync().
        var currentConfig = await ConfigService.LoadConfigurationAsync();

        // 2. Create a new SearchConfiguration object and copy the properties from the loaded config.
        // 3. Assign this new object to _configForEditing.
        _configForEditing = new SearchConfiguration
        {
            ResultsPerPage = currentConfig.ResultsPerPage,
            SnippetLength = currentConfig.SnippetLength,
            Theme = currentConfig.Theme,
            SearchIndexPath = currentConfig.SearchIndexPath
        };

        // 4. Set _showConfiguration to true.
        _showConfiguration = true;
    }

    /// <summary>
    /// Saves the modified configuration and closes the form.
    /// </summary>
    /// <param name="newConfig">The configuration object with the new settings from the form.</param>
    private async Task HandleConfigurationSave(SearchConfiguration newConfig)
    {
        // 1. Call ConfigService.SaveConfigurationAsync(newConfig).
        await ConfigService.SaveConfigurationAsync(newConfig);
        
        // 2. Set _showConfiguration to false.
        _showConfiguration = false;
        
        // Note: For the changes to take effect immediately on the search page,
        // we would need to either force a reload or pass the new config down.
        // For simplicity, we'll require a page refresh.
    }

    /// <summary>
    /// Hides the configuration form without saving changes.
    /// </summary>
    private void HandleConfigurationCancel()
    {
        // 1. Set _showConfiguration to false.
        _showConfiguration = false;
    }
}
