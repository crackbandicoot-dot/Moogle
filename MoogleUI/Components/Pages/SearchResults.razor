@*
    File: SearchResults.razor
    Component: UI Components
*@

@using Shared;
@using Microsoft.AspNetCore.Components

<div class="search-results-container">
    @if (Results == null || !Results.Any())
    {
        <p>No results to display. Please enter a query and click Search.</p>
    }
    else
    {
        @foreach (var result in Results)
        {
            <SearchResultItem Result="result" OnResultClicked="HandleResultClicked" />
        }

        <div class="pagination-controls">
            <button @onclick="() => ChangePage(CurrentPage - 1)">Previous</button>
            <span>Page @CurrentPage of @TotalPages</span>
            <button @onclick="() => ChangePage(CurrentPage + 1)">Next</button>
        </div>
    }
</div>

@code {
    /// <summary>
    /// The list of search results to display for the current page.
    /// </summary>
    [Parameter]
    public List<SearchResult> Results { get; set; } = new();

    /// <summary>
    /// The current page number being displayed (1-based).
    /// </summary>
    [Parameter]
    public int CurrentPage { get; set; } = 1;

    /// <summary>
    /// The total number of results found for the query across all pages.
    /// Used to calculate the total number of pages.
    /// </summary>
    [Parameter]
    public int TotalResults { get; set; }

    /// <summary>
    /// The number of results displayed per page.
    /// </summary>
    [Parameter]
    public int ResultsPerPage { get; set; } = 10;

    /// <summary>
    /// An event callback that is invoked when a user clicks on a search result.
    /// This event bubbles up from the SearchResultItem component.
    /// </summary>
    [Parameter]
    public EventCallback<string> OnResultClicked { get; set; }

    /// <summary>
    /// An event callback that is invoked when the user changes the page.
    /// It passes the new page number to the parent component.
    /// </summary>
    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }

    /// <summary>
    /// Calculates the total number of pages based on TotalResults and ResultsPerPage.
    /// </summary>
    private int TotalPages => (int)Math.Ceiling((double)TotalResults / ResultsPerPage);

    /// <summary>
    /// Propagates the result click event from a child SearchResultItem to the parent component.
    /// </summary>
    /// <param name="documentId">The ID of the document that was clicked.</param>
    /// <returns>A Task representing the asynchronous operation.</returns>
    private Task HandleResultClicked(string documentId)
    {
        // 1. Invoke the OnResultClicked event callback, passing the received documentId.
        return OnResultClicked.InvokeAsync(documentId);
    }

    /// <summary>
    /// Invokes the OnPageChanged event callback with the new page number.
    /// </summary>
    /// <param name="newPage">The new page number to navigate to.</param>
    /// <returns>A Task representing the asynchronous operation.</returns>
    private Task ChangePage(int newPage)
    {
        // 1. Check if the newPage is within the valid range (i.e., between 1 and TotalPages).
        if (newPage >= 1 && newPage <= TotalPages)
        {
            // 2. If it is, invoke the OnPageChanged event callback with the newPage number.
            return OnPageChanged.InvokeAsync(newPage);
        }
        return Task.CompletedTask;
    }
}
