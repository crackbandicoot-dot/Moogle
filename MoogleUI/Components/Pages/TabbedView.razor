
@*
    File: TabbedView.razor
    Component: UI Components
*@

@using Shared;
@using Microsoft.AspNetCore.Components

<div class="tabbed-view-container">
    @if (Tabs != null && Tabs.Any())
    {
        <ul class="nav nav-tabs">
            @foreach (var tab in Tabs)
            {
                var cssClass = (ActiveTab != null && ActiveTab.Id == tab.Id) ? "nav-link active" : "nav-link";
                <li class="nav-item">
                    <a class="@cssClass" href="javascript:void(0)" @onclick="() => SelectTab(tab)">
                        @tab.Title
                        <button class="btn-close" @onclick="() => CloseTab(tab)" @onclick:stopPropagation="true"></button>
                    </a>
                </li>
            }
        </ul>
        <div class="tab-content">
            @if (ActiveTab != null)
            {
                <DocumentView Document="ActiveTab" />
            }
        </div>
    }
</div>

@code {
    /// <summary>
    /// The list of all currently open documents (tabs).
    /// </summary>
    [Parameter]
    public List<Document> Tabs { get; set; } = new();

    /// <summary>
    /// The document that is currently selected and displayed.
    /// </summary>
    [Parameter]
    public Document? ActiveTab { get; set; }

    /// <summary>
    /// An event callback that is invoked when the user clicks on a different tab to select it.
    /// </summary>
    [Parameter]
    public EventCallback<Document> OnTabSelected { get; set; }

    /// <summary>
    /// An event callback that is invoked when the user clicks the close button on a tab.
    /// </summary>
    [Parameter]
    public EventCallback<Document> OnTabClosed { get; set; }

    /// <summary>
    /// Invokes the OnTabSelected event callback to notify the parent component
    /// that the user wants to switch to a different tab.
    /// </summary>
    /// <param name="tabToSelect">The document corresponding to the tab that was clicked.</param>
    /// <returns>A Task representing the asynchronous operation.</returns>
    private Task SelectTab(Document tabToSelect)
    {
        // 1. Invoke the OnTabSelected event callback, passing 'tabToSelect' as the argument.
        return OnTabSelected.InvokeAsync(tabToSelect);
    }

    /// <summary>
    /// Invokes the OnTabClosed event callback to notify the parent component
    /// that the user wants to close a tab.
    /// </summary>
    /// <param name="tabToClose">The document corresponding to the tab to be closed.</param>
    /// <returns>A Task representing the asynchronous operation.</returns>
    private Task CloseTab(Document tabToClose)
    {
        // 1. Invoke the OnTabClosed event callback, passing 'tabToClose' as the argument.
        return OnTabClosed.InvokeAsync(tabToClose);
    }
}
