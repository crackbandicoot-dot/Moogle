@*
    File: SearchPage.razor
    Component: UI Components
*@

@page "/"
@using Shared;
@inject ISearchService SearchService
@inject IConfigurationService ConfigService

<div class="search-page-container">
    <h1 class="page-title">Moogle!</h1>
    
    <SearchBar OnSearchSubmitted="HandleSearchSubmitted" />

    <SearchResults 
        Results="_searchResults"
        CurrentPage="_currentPage"
        TotalResults="_totalResults"
        ResultsPerPage="_config?.ResultsPerPage ?? 10"
        OnPageChanged="HandlePageChanged"
        OnResultClicked="HandleResultClicked" />
</div>

@code {
    private SearchConfiguration _config = new();
    private List<SearchResult> _searchResults = new();
    private string _currentQuery = string.Empty;
    private int _currentPage = 1;
    private int _totalResults = 0;

    /// <summary>
    /// An event callback that is invoked when a user clicks a search result.
    /// This is intended to be handled by a parent layout component to open a new document tab.
    /// </summary>
    [Parameter]
    public EventCallback<string> OnDocumentOpenRequested { get; set; }

    /// <summary>
    /// Initializes the component by loading the application configuration.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // 1. Call the ConfigService.LoadConfigurationAsync() method.
        // 2. Assign the returned configuration to the _config field.
        _config = await ConfigService.LoadConfigurationAsync();
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Handles the search submission event from the SearchBar component.
    /// It resets pagination and fetches the first page of results for the new query.
    /// </summary>
    /// <param name="query">The search query submitted by the user.</param>
    private Task HandleSearchSubmitted(string query)
    {
        // 1. Set _currentQuery to the provided 'query'.
        _currentQuery = query;
        // 2. Reset _currentPage to 1.
        _currentPage = 1;
        // 3. Call the internal PerformSearchAsync() method to fetch the data.
        return PerformSearchAsync();
    }

    /// <summary>
    /// Handles the page change event from the SearchResults component.
    /// It fetches the data for the requested page using the existing query.
    /// </summary>
    /// <param name="newPage">The new page number to display.</param>
    private Task HandlePageChanged(int newPage)
    {
        // 1. Set _currentPage to the provided 'newPage'.
        _currentPage = newPage;
        // 2. Call the internal PerformSearchAsync() method to fetch the data for the new page.
        return PerformSearchAsync();
    }

    /// <summary>
    /// A helper method to perform the actual search operation and update the component's state.
    /// </summary>
    private async Task PerformSearchAsync()
    {
        // 1. Check if _currentQuery is not empty.
        if (string.IsNullOrWhiteSpace(_currentQuery))
        {
            _searchResults.Clear();
            _totalResults = 0;
            StateHasChanged();
            return;
        }

        // 2. Call SearchService.SearchAsync(_currentQuery, _currentPage, _config.ResultsPerPage).
        _searchResults = await SearchService.SearchAsync(_currentQuery, _currentPage, _config.ResultsPerPage);

        // 4. Update _totalResults using an estimation strategy.
        if (_searchResults.Count < _config.ResultsPerPage)
        {
            // We've reached the last page (or the only page), so we now know the exact total.
            _totalResults = (_currentPage - 1) * _config.ResultsPerPage + _searchResults.Count;
        }
        else
        {
            // We have a full page, so we estimate there's at least one more result to enable the 'Next' button.
            _totalResults = _currentPage * _config.ResultsPerPage + 1;
        }

        // 5. Call StateHasChanged() to re-render the component with the new data.
        StateHasChanged();
    }

    /// <summary>
    /// Propagates the result click event up to the parent component (e.g., MainLayout).
    /// </summary>
    /// <param name="documentId">The ID of the document that was clicked.</param>
    private Task HandleResultClicked(string documentId)
    {
        // 1. Invoke the OnDocumentOpenRequested event callback, passing the documentId.
        return OnDocumentOpenRequested.InvokeAsync(documentId);
    }
}
